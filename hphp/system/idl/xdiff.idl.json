{
    "preamble": "",
    "consts": [

    ],
    "funcs": [
        {
            "name": "xdiff_file_bdiff_size",
            "desc": "Returns a size of a result file that would be created after applying binary patch from file file to the original file.",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the size of file that would be created."
            },
            "args": [
                {
                    "name": "file",
                    "type": "Variant",
                    "desc": "The path to the binary patch created by xdiff_string_bdiff() or xdiff_string_rabdiff() function."
                }
            ]
        },
        {
            "name": "xdiff_file_bdiff",
            "desc": "Makes a binary diff of two files and stores the result in a patch file. This function works with both text and binary files. Resulting patch file can be later applied using xdiff_file_bpatch()\/ xdiff_string_bpatch().",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "old_file",
                    "type": "Variant",
                    "desc": "Path to the first file. This file acts as \"old\" file."
                },
                {
                    "name": "new_file",
                    "type": "Variant",
                    "desc": "Path to the second file. This file acts as \"new\" file."
                },
                {
                    "name": "dest",
                    "type": "Variant",
                    "desc": "Path of the resulting patch file. Resulting file contains differences between \"old\" and \"new\" files. It is in binary format and is human-unreadable."
                }
            ]
        },
        {
            "name": "xdiff_file_bpatch",
            "desc": "Patches a file with a binary patch and stores the result in a file dest. This function accepts patches created both via xdiff_file_bdiff() and xdiff_file_rabdiff() functions or their string counterparts.",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "file",
                    "type": "Variant",
                    "desc": "The original file."
                },
                {
                    "name": "patch",
                    "type": "Variant",
                    "desc": "The binary patch file."
                },
                {
                    "name": "dest",
                    "type": "Variant",
                    "desc": "Path of the resulting file."
                }
            ]
        },
        {
            "name": "xdiff_file_diff_binary",
            "desc": "Makes a binary diff of two files and stores the result in a patch file. This function works with both text and binary files. Resulting patch file can be later applied using xdiff_file_bpatch().\n\nStarting with version 1.5.0 this function is an alias of xdiff_file_bdiff().",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "old_file",
                    "type": "Variant",
                    "desc": "Path to the first file. This file acts as \"old\" file."
                },
                {
                    "name": "new_file",
                    "type": "Variant",
                    "desc": "Path to the second file. This file acts as \"new\" file."
                },
                {
                    "name": "dest",
                    "type": "Variant",
                    "desc": "Path of the resulting patch file. Resulting file contains differences between \"old\" and \"new\" files. It is in binary format and is human-unreadable."
                }
            ]
        },
        {
            "name": "xdiff_file_diff",
            "desc": "Makes an unified diff containing differences between old_file and new_file and stores it in dest file. The resulting file is human-readable. An optional context parameter specifies how many lines of context should be added around each change. Setting minimal parameter to true will result in outputting the shortest patch file possible (can take a long time).",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "old_file",
                    "type": "Variant",
                    "desc": "Path to the first file. This file acts as \"old\" file."
                },
                {
                    "name": "new_file",
                    "type": "Variant",
                    "desc": "Path to the second file. This file acts as \"new\" file."
                },
                {
                    "name": "dest",
                    "type": "Variant",
                    "desc": "Path of the resulting patch file."
                },
                {
                    "name": "context",
                    "type": "Variant",
                    "desc": "Indicates how many lines of context you want to include in diff result."
                },
                {
                    "name": "minimal",
                    "type": "Variant",
                    "desc": "Set this parameter to TRUE if you want to minimalize size of the result (can take a long time)."
                }
            ]
        },
        {
            "name": "xdiff_file_merge3",
            "desc": "Merges three files into one and stores the result in a file dest. The old_file is an original version while new_file1 and new_file2 are modified versions of an original.",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE if merge was successful, string with rejected chunks if it was not or FALSE if an internal error happened."
            },
            "args": [
                {
                    "name": "old_file",
                    "type": "Variant",
                    "desc": "Path to the first file. It acts as \"old\" file."
                },
                {
                    "name": "new_file1",
                    "type": "Variant",
                    "desc": "Path to the second file. It acts as modified version of old_file."
                },
                {
                    "name": "new_file2",
                    "type": "Variant",
                    "desc": "Path to the third file. It acts as modified version of old_file."
                },
                {
                    "name": "dest",
                    "type": "Variant",
                    "desc": "Path of the resulting file, containing merged changed from both new_file1 and new_file2."
                }
            ]
        },
        {
            "name": "xdiff_file_patch_binary",
            "desc": "Patches a file with a binary patch and stores the result in a file dest. This function accepts patches created both via xdiff_file_bdiff() or xdiff_file_rabdiff() functions or their string counterparts.\n\nStarting with version 1.5.0 this function is an alias of xdiff_file_bpatch().",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "file",
                    "type": "Variant",
                    "desc": "The original file."
                },
                {
                    "name": "patch",
                    "type": "Variant",
                    "desc": "The binary patch file."
                },
                {
                    "name": "dest",
                    "type": "Variant",
                    "desc": "Path of the resulting file."
                }
            ]
        },
        {
            "name": "xdiff_file_patch",
            "desc": "Patches a file with a patch and stores the result in a file. patch has to be an unified diff created by xdiff_file_diff()\/ xdiff_string_diff() function. An optional flags parameter specifies mode of operation.",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns FALSE if an internal error happened, string with rejected chunks if patch couldn't be applied or TRUE if patch has been successfully applied."
            },
            "args": [
                {
                    "name": "file",
                    "type": "Variant",
                    "desc": "The original file."
                },
                {
                    "name": "patch",
                    "type": "Variant",
                    "desc": "The unified patch file. It has to be created using xdiff_string_diff(), xdiff_file_diff() functions or compatible tools."
                },
                {
                    "name": "dest",
                    "type": "Variant",
                    "desc": "Path of the resulting file."
                },
                {
                    "name": "flags",
                    "type": "Variant",
                    "desc": "Can be either XDIFF_PATCH_NORMAL (default mode, normal patch) or XDIFF_PATCH_REVERSE (reversed patch).\n\nStarting from version 1.5.0, you can also use binary OR to enable XDIFF_PATCH_IGNORESPACE flag."
                }
            ]
        },
        {
            "name": "xdiff_file_rabdiff",
            "desc": "Makes a binary diff of two files and stores the result in a patch file. The difference between this function and xdiff_file_bdiff() is different algorithm used which should result in faster execution and smaller diff produced. This function works with both text and binary files. Resulting patch file can be later applied using xdiff_file_bpatch()\/ xdiff_string_bpatch().\n\nFor more details about differences between algorithm used please check libxdiff website.",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "old_file",
                    "type": "Variant",
                    "desc": "Path to the first file. This file acts as \"old\" file."
                },
                {
                    "name": "new_file",
                    "type": "Variant",
                    "desc": "Path to the second file. This file acts as \"new\" file."
                },
                {
                    "name": "dest",
                    "type": "Variant",
                    "desc": "Path of the resulting patch file. Resulting file contains differences between \"old\" and \"new\" files. It is in binary format and is human-unreadable."
                }
            ]
        },
        {
            "name": "xdiff_string_bdiff_size",
            "desc": "Returns a size of a result file that would be created after applying binary patch to the original file.",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the size of file that would be created."
            },
            "args": [
                {
                    "name": "patch",
                    "type": "Variant",
                    "desc": "The binary patch created by xdiff_string_bdiff() or xdiff_string_rabdiff() function."
                }
            ]
        },
        {
            "name": "xdiff_string_bdiff",
            "desc": "Makes a binary diff of two strings and returns the result. This function works with both text and binary data. Resulting patch can be later applied using xdiff_string_bpatch()\/ xdiff_file_bpatch().",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns string with binary diff containing differences between \"old\" and \"new\" data or FALSE if an internal error occurred."
            },
            "args": [
                {
                    "name": "old_data",
                    "type": "Variant",
                    "desc": "First string with binary data. It acts as \"old\" data."
                },
                {
                    "name": "new_data",
                    "type": "Variant",
                    "desc": "Second string with binary data. It acts as \"new\" data."
                }
            ]
        },
        {
            "name": "xdiff_string_bpatch",
            "desc": "Patches a string str with a binary patch. This function accepts patches created both via xdiff_string_bdiff() and xdiff_string_rabdiff() functions or their file counterparts.",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the patched string, or FALSE on error."
            },
            "args": [
                {
                    "name": "str",
                    "type": "Variant",
                    "desc": "The original binary string."
                },
                {
                    "name": "patch",
                    "type": "Variant",
                    "desc": "The binary patch string."
                }
            ]
        },
        {
            "name": "xdiff_string_diff_binary",
            "desc": "Makes a binary diff of two strings and returns the result. This function works with both text and binary data. Resulting patch can be later applied using xdiff_string_bpatch()\/ xdiff_file_bpatch().\n\nStarting with version 1.5.0 this function is an alias of xdiff_string_bdiff().",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns string with result or FALSE if an internal error happened."
            },
            "args": [
                {
                    "name": "old_data",
                    "type": "Variant",
                    "desc": "First string with binary data. It acts as \"old\" data."
                },
                {
                    "name": "new_data",
                    "type": "Variant",
                    "desc": "Second string with binary data. It acts as \"new\" data."
                }
            ]
        },
        {
            "name": "xdiff_string_diff",
            "desc": "Makes an unified diff containing differences between old_data string and new_data string and returns it. The resulting diff is human-readable. An optional context parameter specifies how many lines of context should be added around each change. Setting minimal parameter to true will result in outputting the shortest patch file possible (can take a long time).",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns string with resulting diff or FALSE if an internal error happened."
            },
            "args": [
                {
                    "name": "old_data",
                    "type": "Variant",
                    "desc": "First string with data. It acts as \"old\" data."
                },
                {
                    "name": "new_data",
                    "type": "Variant",
                    "desc": "Second string with data. It acts as \"new\" data."
                },
                {
                    "name": "context",
                    "type": "Variant",
                    "desc": "Indicates how many lines of context you want to include in the diff result."
                },
                {
                    "name": "minimal",
                    "type": "Variant",
                    "desc": "Set this parameter to TRUE if you want to minimalize the size of the result (can take a long time)."
                }
            ]
        },
        {
            "name": "xdiff_string_merge3",
            "desc": "Merges three strings into one and returns the result. The old_data is an original version of data while new_file1 and new_file2 are modified versions of an original. An optional error is used to pass any rejected parts during merging process.",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the merged string, FALSE if an internal error happened, or TRUE if merged string is empty."
            },
            "args": [
                {
                    "name": "old_data",
                    "type": "Variant",
                    "desc": "First string with data. It acts as \"old\" data."
                },
                {
                    "name": "new_data1",
                    "type": "Variant",
                    "desc": "Second string with data. It acts as modified version of old_data."
                },
                {
                    "name": "new_data2",
                    "type": "Variant",
                    "desc": "Third string with data. It acts as modified version of old_data."
                },
                {
                    "name": "error",
                    "type": "Variant",
                    "desc": "If provided then rejected parts are stored inside this variable."
                }
            ]
        },
        {
            "name": "xdiff_string_patch_binary",
            "desc": "Patches a string str with a binary patch. This function accepts patches created both via xdiff_string_bdiff() and xdiff_string_rabdiff() functions or their file counterparts.\n\nStarting with version 1.5.0 this function is an alias of xdiff_string_bpatch().",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the patched string, or FALSE on error."
            },
            "args": [
                {
                    "name": "str",
                    "type": "Variant",
                    "desc": "The original binary string."
                },
                {
                    "name": "patch",
                    "type": "Variant",
                    "desc": "The binary patch string."
                }
            ]
        },
        {
            "name": "xdiff_string_patch",
            "desc": "Patches a str string with an unified patch in patch parameter and returns the result. patch has to be an unified diff created by xdiff_file_diff()\/ xdiff_string_diff() function. An optional flags parameter specifies mode of operation. Any rejected parts of the patch will be stored inside error variable if it is provided.",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the patched string, or FALSE on error."
            },
            "args": [
                {
                    "name": "str",
                    "type": "Variant",
                    "desc": "The original string."
                },
                {
                    "name": "patch",
                    "type": "Variant",
                    "desc": "The unified patch string. It has to be created using xdiff_string_diff(), xdiff_file_diff() functions or compatible tools."
                },
                {
                    "name": "flags",
                    "type": "Variant",
                    "desc": "flags can be either XDIFF_PATCH_NORMAL (default mode, normal patch) or XDIFF_PATCH_REVERSE (reversed patch).\n\nStarting from version 1.5.0, you can also use binary OR to enable XDIFF_PATCH_IGNORESPACE flag."
                },
                {
                    "name": "error",
                    "type": "Variant",
                    "desc": "If provided then rejected parts are stored inside this variable."
                }
            ]
        },
        {
            "name": "xdiff_string_rabdiff",
            "desc": "Makes a binary diff of two strings and returns the result. The difference between this function and xdiff_string_bdiff() is different algorithm used which should result in faster execution and smaller diff produced. This function works with both text and binary data. Resulting patch can be later applied using xdiff_string_bpatch()\/ xdiff_file_bpatch().\n\nFor more details about differences between algorithm used please check libxdiff website.",
            "flags": [
                "ZendCompat",
                "NeedsActRec"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns string with binary diff containing differences between \"old\" and \"new\" data or FALSE if an internal error occurred."
            },
            "args": [
                {
                    "name": "old_data",
                    "type": "Variant",
                    "desc": "First string with binary data. It acts as \"old\" data."
                },
                {
                    "name": "new_data",
                    "type": "Variant",
                    "desc": "Second string with binary data. It acts as \"new\" data."
                }
            ]
        }
    ],
    "classes": [

    ]
}